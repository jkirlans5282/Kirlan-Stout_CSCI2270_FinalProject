#include "MarkovChain.h"

int main()
{
    //This is the default constructor; it creates a Markov chain via a file, the name of which is passed as the first argument.
    MarkovChain example1("HungerGames.txt");

    //This constructor constructs a Markov chain directly from the string that is passed in, not from a file.
    //To do this, the constructor must be passed a true boolean value as its second argument. This normally defaults to false.
    MarkovChain example2("one one two one two three one two three four one two three four five", true);

    //These four have all have been initialized in non-verbose mode.
    //Objects in verbose mode will print out -a lot= of information to the command line.
    //Useful for debugging or seeing what's happening behind the scenes.
    //You can set it as verbose during construction, or calling the method chain.verbose(true).

    //THIS IS COMMENTED OUT BECAUSE IT PRINTS WAY TOO MUCH: MarkovChain example1verbose("hemingway_test.txt", false, true);

    std::cout<<"Verbose output when read from"<<std::endl;
    std::cout<<"\"one one two one two three one two three four one two three four five\":"<<std::endl<<std::endl;
    MarkovChain example3("one one two one two three one two three four one two three four five", true, true);
    std::cout<<std::endl;

    //You can also change the mode of an object after creation:

    example1.verbose(false); //Sets verbose to false, regardless of previous state
    example2.verbose(true); //Sets verbose to true, regardless of previous state
    example3.verbose(); //Changes verbose to the opposite of the previous state

    //To generate strings, we use the generateString function:
    std::string output = example1.generateString(100); //100 is the length of the string in words

    std::cout<<"String generated by HungerGames.txt:"<<std::endl<<std::endl;
    std::cout << "Output: " << output << std::endl<<std::endl;

    //This is an example of how generation works if verbose mode is enabled:
    //The information is printed when generateString is called, so for this example we won't actually print the string it generates.
    //Verbose mode prints enough already.

    std::cout<<"Verbose output when a string is generated from"<<std::endl;
    std::cout<<"\"one one two one two three one two three four one two three four five\":"<<std::endl<<std::endl;
    output = example2.generateString(100);
    std::cout<<std::endl<<std::endl;

    //Each generation resets the start point; if you want to generate the word that would be after the last generation, you can use this function:

    output = example2.generateNextWord();
    std::cout << output << std::endl;
    output = example2.generateNextWord();
    std::cout << output << std::endl;
    output = example2.generateNextWord();
    std::cout << output << std::endl;

    //To add more text from a file to your markov chain, you can use:
    example1.add("HungerGames.txt");

    //If you want to pass a string, a true boolean value can be used as the second argument.
    example2.add("Hello isn't this a fine addition to this example?", true);

    //And to print information from the objects, you can use:

    example2.print(); //This prints the hashtable used to store all the words.

    //This prints the information pertaining to the word "old", namely the words that follow it.
    example2.print("two");
    example2.print("old");


    return 0;
}
